<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:lc="clr-namespace:MoeLoaderDelta.Control"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!--  SimpleStyles.XAML defines a set of control styles which are simplified starting points for creating your own controls  -->

    <!--
        Brushes : These are used to define the color for background, foreground, selection, enabled etc of all controls
        If you want to change the color of a control you can just chnage the brush; if you want to add a new shape or change arrangement then also edit the template
    -->

    <!--  Style and Template pairs are used to define each control Part  -->
    <!--  The Style provides default values on the control; the Template gives the elements for each control  -->

    <!--
        Simple ComboBox
        This uses the ComboBoxToggleButton to expand and collapse a Popup control
        SimpleScrollViewer to allow items to be scrolled and SimpleComboBoxItem to define the look of each item
        The Popup shows a list of items in a StackPanel
    -->

    <!--<Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<ToggleButton Grid.Column="2" Template="{StaticResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
						<ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
						
                        <TextBox Visibility="Hidden" Template="{StaticResource ComboBoxTextBox}" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>
						
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Scroll">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True" Visibility="Hidden">
                                <Border x:Name="DropDownBorder" Background="{StaticResource WindowBackgroundBrush}" BorderBrush="{StaticResource SolidBorderBrush}" BorderThickness="1" CornerRadius="0"/>
								<ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
						
									<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
								
								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>						
						<Trigger Property="HasItems" Value="false">
							<Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
							<Setter Property="CornerRadius" Value="0" TargetName="DropDownBorder"/>
							<Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
						</Trigger>
						<Trigger Property="IsEditable" Value="true">
							<Setter Property="IsTabStop" Value="false"/>
							<Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
							<Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

    <!--  Simple ComboBoxItem - This is used for each item inside of the ComboBox. You can change the selected color of each item below  -->
    <!--<Style x:Key="SimpleComboBoxItem" d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" Value="{StaticResource SelectedBackgroundBrush}" TargetName="Border"/>
						</Trigger>
						
						<Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

    <!--  Opacity  -->
    <sys:Double x:Key="OpacityDisable">0.5</sys:Double>

    <!--  Color  -->
    <Color x:Key="ColorLightSkyBlueC">#7BE1FF</Color>
    <Color x:Key="ColorThemeBlueC">#3585E4</Color>

    <!--  Universal color brush  -->
    <SolidColorBrush x:Key="ColorThemeBlue" Color="{DynamicResource ColorThemeBlueC}" />
    <SolidColorBrush x:Key="ColorLightBlue" Color="#6050ABED" />
    <SolidColorBrush x:Key="ColorLightGray" Color="#CCC" />
    <SolidColorBrush x:Key="ColorLightSkyBlue" Color="{DynamicResource ColorLightSkyBlueC}" />
    <SolidColorBrush x:Key="ColorGridBackground" Color="#FBFBFB" />

    <!--  TextBox Brush  -->
    <SolidColorBrush x:Key="TextBoxNormalBorder" Color="#BCBCC8" />

    <!--  ItemsControl:Tree  -->
    <SolidColorBrush x:Key="ItemsContentBackground" Color="#FBFBFB" />
    <SolidColorBrush x:Key="ItemSelectedForeground" Color="#000" />
    <SolidColorBrush x:Key="ItemSelectedBackground" Color="#4050BBFD" />
    <SolidColorBrush x:Key="ItemMouseOverForeground" Color="#000" />
    <SolidColorBrush x:Key="ItemMouseOverBackground" Color="#208FE0FF" />

    <!--  NormalBrush is used as the Background for SimpleButton, SimpleRepeatButton  -->
    <SolidColorBrush x:Key="NormalBrush" Color="#FFEAEAEA" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#979797" />

    <!--  LightBrush is used for content areas such as Menu, Tab Control background  -->
    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF" />
        <GradientStop Offset="1.0" Color="#EEE" />
    </LinearGradientBrush>

    <!--  MouseOverBrush is used for MouseOver in Button, Radio Button, CheckBox  -->
    <LinearGradientBrush x:Key="MouseOverBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF" />
        <GradientStop Offset="1.0" Color="White" />
    </LinearGradientBrush>

    <!--  PressedBrush is used for Pressed in Button, Radio Button, CheckBox  -->
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#BBB" />
        <GradientStop Offset="0.1" Color="#EEE" />
        <GradientStop Offset="0.9" Color="#EEE" />
        <GradientStop Offset="1.0" Color="#FFF" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="PressedBorderBrush" Color="#444" />
    <!--  SelectedBackgroundBrush is used for the Selected item in ListBoxItem, ComboBoxItem  -->
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!--  Disabled Brushes are used for the Disabled look of each control  -->
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <!--  Used for background of ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control  -->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <!--  DefaultedBorderBrush is used to show KeyBoardFocus  -->
    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="Black" />
        <GradientStop Offset="1.0" Color="#000" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

    <!--  Used for Checkmark, Radio button, TreeViewItem, Expander ToggleButton glyphs  -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <!--  Simple Separator - This template is used for a Separator in a menu  -->
    <Style x:Key="SimpleSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,5,0,5" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource ColorLightGray}" BorderThickness=".3" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Simple CheckBox style  -->
    <Style x:Key="SimpleCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <DockPanel
                        x:Name="chkPanel"
                        Width="{TemplateBinding Width}"
                        Background="{TemplateBinding Background}"
                        LastChildFill="False"
                        ToolTip="{TemplateBinding Content}">
                        <Image
                            x:Name="ChkIco"
                            Margin="1,0,1,0"
                            DockPanel.Dock="Left"
                            Source="/MoeLoaderDelta;component/Images/chk_f.png"
                            Stretch="None" />
                        <TextBlock
                            Margin="1,0,0,0"
                            VerticalAlignment="Center"
                            DockPanel.Dock="Left"
                            Foreground="{TemplateBinding Foreground}"
                            Text="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="ChkIco" Property="Source" Value="/MoeLoaderDelta;component/Images/chk_t.png" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="ChkIco" Property="Source" Value="/MoeLoaderDelta;component/Images/chk_n.png" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="chkPanel" Property="Opacity" Value="{DynamicResource OpacityDisable}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SimpleButtonFocusVisual is used to show keyboard focus around a SimpleButton control  -->
    <Style x:Key="SimpleButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="2"
                            Stroke="#60000000"
                            StrokeDashArray="1 2"
                            StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Simple Button - This control sets brushes on each state. Note that these brushes must be listed above since they are static resources  -->
    <Style
        x:Key="SimpleButton"
        BasedOn="{x:Null}"
        TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  We use Grid as a root because it is easy to add more elements to customize the button  -->
                    <Grid x:Name="Grid">
                        <Border
                            x:Name="Border"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />

                        <!--  Content Presenter is where the text content etc is placed by the control  -->
                        <!--  The bindings are useful so that the control can be parameterized without editing the template  -->
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Each state sets a brush on the Border in the template  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Simple ComboBox Toggle Button - This is used in ComboBox to expand and collapse the ComboBox Popup  -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <!--  ColumnDefinition Width="16"/  -->
            </Grid.ColumnDefinitions>
            <Rectangle
                x:Name="Rectangle"
                Grid.ColumnSpan="2"
                Width="Auto"
                Height="Auto"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Fill="{DynamicResource NormalBrush}"
                RadiusX="0"
                RadiusY="0" />
            <Rectangle
                Grid.Column="0"
                Width="Auto"
                Height="Auto"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Fill="{DynamicResource WindowBackgroundBrush}"
                RadiusX="0"
                RadiusY="0" />
            <!--  Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/  -->
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource PressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter TargetName="Rectangle" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <!--  Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow"/  -->
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  This is the area which contains the selected item in the ComboBox  -->

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border Background="{TemplateBinding Background}">
            <ScrollViewer
                x:Name="PART_ContentHost"
                Margin="0"
                Background="{TemplateBinding Background}" />
        </Border>
    </ControlTemplate>

    <!--
        Simple SimpleProgressBar
        The template uses two Border controls to show the Track and Progress
        Limitations : It only supports a horizontal orientated ProgressBar
    -->
    <Style x:Key="SimpleProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid>

                        <!--  This Border is the track. It must be named PART_Track  -->
                        <Border
                            x:Name="PART_Track"
                            Background="{DynamicResource PressedBrush}"
                            BorderBrush="#CCA7A7A7"
                            BorderThickness="1"
                            CornerRadius="0" />

                        <!--  This Border shows progress. It must be named PART_Indicator for the control to function  -->
                        <Border
                            x:Name="PART_Indicator"
                            Margin="0,1"
                            HorizontalAlignment="Left"
                            Background="#990099D0"
                            BorderBrush="#D80099D0"
                            BorderThickness="1"
                            CornerRadius="0" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Simple TextBox  -->
    <Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Padding="2"
                            Background="{DynamicResource WindowBackgroundBrush}"
                            BorderBrush="{DynamicResource SolidBorderBrush}"
                            BorderThickness="1"
                            CornerRadius="0">

                            <!--  The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function  -->
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Margin="0"
                                Background="{TemplateBinding Background}" />

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region  Light Blue TextBox-->
    <Style x:Key="LightBlueTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Padding="2"
                            Background="{DynamicResource WindowBackgroundBrush}"
                            BorderBrush="{DynamicResource TextBoxNormalBorder}"
                            BorderThickness="1"
                            CornerRadius="0" />
                        <Border
                            Padding="2"
                            Background="Transparent"
                            BorderThickness="0">
                            <!--  The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function  -->
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Margin="0"
                                Background="{TemplateBinding Background}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect
                                        BlurRadius="8"
                                        Direction="0"
                                        Opacity=".5"
                                        RenderingBias="Performance"
                                        ShadowDepth="0"
                                        Color="{DynamicResource ColorLightSkyBlueC}" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ColorLightBlue}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region DefaultComboBox-->
    <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="ToggleButton">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="MinWidth" Value="80" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border
                            x:Name="Background"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource TextBoxNormalBorder}"
                            BorderThickness="1">
                            <Path
                                x:Name="Path"
                                Width="Auto"
                                Height="Auto"
                                Margin="0,0.082,0,8.859"
                                Data="M0,3 C0,1.3431457 1.3431457,0 3,0 L129,0 C130.65686,0 132,1.3431457 132,3 L132,13.853975 C86.718803,0.055481441 26.160202,27.400364 0,11.585506 z"
                                Stretch="Fill"
                                Stroke="{x:Null}"
                                StrokeLineJoin="Round"
                                StrokeThickness="1">
                                <Path.Fill>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <!--  combox背景色#198B53  -->
                                        <GradientStop Offset="0.113" Color="White" />
                                        <GradientStop Offset="1" Color="White" />
                                    </LinearGradientBrush>
                                </Path.Fill>
                            </Path>
                        </Border>
                        <!--  倒三角的颜色  -->
                        <Path
                            x:Name="Path1"
                            Width="10"
                            Height="10"
                            Margin="5,0,7,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="M0.5,0.5 L9.5,0.5 L5.0625,9.5 L5.0625,9.5 z"
                            Fill="{DynamicResource ColorLightGray}"
                            Stretch="Fill"
                            Stroke="{DynamicResource ColorLightGray}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--  移入时按钮颜色 图案颜色 锯齿颜色  -->
                            <Setter TargetName="Path1" Property="Fill" Value="{DynamicResource ColorLightSkyBlue}" />
                            <Setter TargetName="Background" Property="BorderBrush" Value="{DynamicResource ColorLightSkyBlue}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultComboBoxStyle" TargetType="ComboBox">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxNormalBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="4,3" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <!--  下拉框属性设置  -->
                <Style TargetType="ComboBoxItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBoxItem">
                                <Border
                                    Name="Back"
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="0">
                                    <ContentPresenter
                                        Margin="8,3"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        ContentSource="{Binding Source}" />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <!--  下拉框背景色  -->
                                    <Trigger Property="IsHighlighted" Value="True">
                                        <Setter TargetName="Back" Property="Background" Value="{DynamicResource ColorLightSkyBlue}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid x:Name="MainGrid">
                        <Popup
                            x:Name="PART_Popup"
                            Grid.Row="1"
                            MaxWidth="{TemplateBinding MaxWidth}"
                            Margin="1"
                            IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <Grid
                                x:Name="Shdw"
                                MinWidth="{Binding Path=ActualWidth, ElementName=MainGrid}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <!--  下拉框属性设置  -->
                                <Border
                                    x:Name="Bordertop"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{StaticResource TextBoxNormalBorder}"
                                    BorderThickness="1"
                                    CornerRadius="0">
                                    <ScrollViewer>
                                        <ItemsPresenter />
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                        <ToggleButton
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource ColorThemeBlue}"
                            BorderThickness="3"
                            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxReadonlyToggleButton}" />
                        <!--  combox字体的间距  -->
                        <TextBlock
                            Margin="8,0"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            IsHitTestVisible="false"
                            Text="{TemplateBinding Text}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  焦点颜色  -->
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect
                                        BlurRadius="8"
                                        Direction="0"
                                        Opacity=".8"
                                        RenderingBias="Performance"
                                        ShadowDepth="0"
                                        Color="{DynamicResource ColorLightSkyBlueC}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region DefaultSliderStyle-->
    <LinearGradientBrush x:Key="SliderBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#AEF" />
        <GradientStop Offset="0.5" Color="#8DF" />
        <GradientStop Offset="1" Color="#AEF" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="SliderThumb" Color="#5AF" />

    <Style x:Key="Slider_DecreaseRepeat" TargetType="RepeatButton">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="{StaticResource SliderBackground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Slider_IncreaseRepeat" TargetType="RepeatButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Slider_ThumbDouble" TargetType="Thumb">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Grid>
                        <Border Background="{StaticResource SliderBackground}" CornerRadius="0,8,8,0" />
                        <Border
                            Width="{Binding ElementName=Slider_ValueView, Path=Width, Mode=OneWay}"
                            Background="#EEE"
                            BorderBrush="Gray"
                            BorderThickness="1"
                            CornerRadius="0,8,8,0">
                            <TextBlock
                                x:Name="Slider_ValueView"
                                Margin="6,0,9,0"
                                VerticalAlignment="Center"
                                Text="{Binding Value, RelativeSource={RelativeSource AncestorType={x:Type Slider}}, StringFormat={}{0:N1}}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Slider_ThumbInt" TargetType="Thumb">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Grid>
                        <Border Background="{StaticResource SliderBackground}" CornerRadius="0,8,8,0" />
                        <Border
                            Width="{Binding ElementName=Slider_ValueView, Path=Width, Mode=OneWay}"
                            Background="#EEE"
                            BorderBrush="Gray"
                            BorderThickness="1"
                            CornerRadius="0,8,8,0">
                            <TextBlock
                                x:Name="Slider_ValueView"
                                Margin="6,0,9,0"
                                VerticalAlignment="Center"
                                Text="{Binding Value, RelativeSource={RelativeSource AncestorType={x:Type Slider}}, StringFormat={}{0}}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DoubleSliderStyle" TargetType="Slider">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid>
                        <Border
                            BorderBrush="Gray"
                            BorderThickness="1"
                            CornerRadius="0,8,8,0">
                            <Track Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="Slider.DecreaseLarge" Style="{StaticResource Slider_DecreaseRepeat}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="Slider.IncreaseLarge" Style="{StaticResource Slider_IncreaseRepeat}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource Slider_ThumbDouble}" />
                                </Track.Thumb>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IntSliderStyle" TargetType="Slider">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid>
                        <Border
                            BorderBrush="Gray"
                            BorderThickness="1"
                            CornerRadius="0,8,8,0">
                            <Track Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="Slider.DecreaseLarge" Style="{StaticResource Slider_DecreaseRepeat}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="Slider.IncreaseLarge" Style="{StaticResource Slider_IncreaseRepeat}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource Slider_ThumbInt}" />
                                </Track.Thumb>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region SmoothScrollViewer-->
    <Style TargetType="{x:Type lc:SmoothScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type lc:SmoothScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter
                            x:Name="PART_ScrollContentPresenter"
                            Grid.Row="0"
                            Grid.Column="0"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            AutomationProperties.AutomationId="VerticalScrollBar"
                            Cursor="Arrow"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Minimum="0"
                            Style="{DynamicResource ScrollBarStyle1}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar
                            x:Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="0"
                            AutomationProperties.AutomationId="HorizontalScrollBar"
                            Cursor="Arrow"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Minimum="0"
                            Orientation="Horizontal"
                            Style="{DynamicResource ScrollBarStyle2}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
</ResourceDictionary>
